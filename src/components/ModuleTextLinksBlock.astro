---
import type { CollectionEntry } from 'astro:content';

type ModuleTextLinksBlock =
  CollectionEntry<'pageHome'>['data']['moduleTextLinksBlock'][0];

interface Props {
  fields: ModuleTextLinksBlock;
}

import { marked } from 'marked';

import LinkWithArrow from '@components/LinkWithArrow.astro';

const { fields } = Astro.props;

const parsedContent = await marked(fields.content);
---

<div class="module container">
  <div class="grid">
    <div class="content">
      <h3 class="title h5">{fields.title}</h3>
      <div class="richtext h1" set:html={parsedContent} />
    </div>
    <div class="cta">
      <LinkWithArrow fields={fields.link} />
    </div>
    {
      fields.contacts && (
        <ul class="contacts">
          {fields.contacts.map((contact) => (
            <li class="contact">
              <span class="title">{contact.title}</span>
              <a href={`mailto:${contact.mail}`} class="mail">
                {contact.mail}
              </a>
              <a
                href={contact.link.link}
                target="_blank"
                rel="noopener noreferrer"
                class="h4 link link-animated"
              >
                {contact.link.linkText}
                <svg viewBox="0 0 9 9" fill="none">
                  <path
                    d="M1.3421 0.360352H8.3801V7.41635H7.3721V2.08835L0.820098 8.64035L0.100098 7.92035L6.6881 1.33235H1.3421V0.360352Z"
                    fill="currentColor"
                  />
                </svg>
              </a>
            </li>
          ))}
        </ul>
      )
    }
  </div>
</div>

<style lang="scss">
  .module {
    margin-block: to-rem(240);
  }

  .grid {
    align-items: baseline;
  }

  .content {
    --cols: 8;
    --col-width: calc(
      (100% - (var(--grid-gutter) * (var(--cols) - 1))) / var(--cols)
    );

    position: relative;
    grid-column: 1 / span var(--cols);
    padding-left: calc(var(--col-width) + var(--grid-gutter));

    .title {
      position: absolute;
      top: 0.5em;
      left: 0;
      translate: -100% 0;
      writing-mode: sideways-lr;
    }
  }

  .cta {
    grid-column: 9 / span 4;
  }

  .contacts {
    grid-column: 2 / span 7;
    display: grid;
    grid-template-columns: subgrid;
    margin-top: calc(to-rem(120) - var(--grid-gutter));
  }

  .contact {
    display: flex;
    flex-direction: column;
    list-style: none;

    &:nth-child(odd) {
      grid-column: 1 / span 3;
    }

    &:nth-child(even) {
      grid-column: 5 / span 3;
    }

    .title {
      text-transform: uppercase;
    }

    .link {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: to-rem(48);

      svg {
        height: 0.5em;
      }
    }
  }
</style>
