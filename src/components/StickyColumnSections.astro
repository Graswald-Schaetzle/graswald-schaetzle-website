---
import type { CollectionEntry } from 'astro:content';

type StickyColumnSection = Extract<
  CollectionEntry<'pageHome'>['data']['moduleStickyContent']['stickyColumn1']['sections'][0],
  {
    type:
      | 'componentStickyColumnContent'
      | 'componentStickyColumnImage'
      | 'componentStickyColumnList';
  }
>;

interface Props {
  fields: StickyColumnSection;
  unorderedList?: boolean;
}

import { marked } from 'marked';

import { Image } from 'astro:assets';

const { fields, unorderedList } = Astro.props;

const ListTag = unorderedList ? 'ul' : 'ol';
---

{
  fields.type === 'componentStickyColumnContent' && (
    <Fragment>
      <h3 class="title h5">{fields.title}</h3>
      <div class="content richtext" set:html={await marked(fields.content)} />
    </Fragment>
  )
}
{
  fields.type === 'componentStickyColumnImage' && (
    <Fragment>
      <h3 class="title h5">{fields.title}</h3>
      <Image src={fields.image.image} alt={fields.image.alt} class="image" />
    </Fragment>
  )
}
{
  fields.type === 'componentStickyColumnList' && (
    <Fragment>
      <h3 class="title h5">{fields.title}</h3>
      <ListTag class="list">
        {fields.text.map((item) => (
          <li class="h3">{item}</li>
        ))}
      </ListTag>
    </Fragment>
  )
}

<style lang="scss">
  .title {
    position: absolute;
    top: 0.5em;
    left: 0;
    writing-mode: sideways-lr;
  }

  .image {
    aspect-ratio: 318 / 398;
    object-fit: cover;
    border-radius: to-rem(24);
  }

  .list {
    display: flex;
    flex-direction: column;
    gap: to-rem(27);
    list-style: upper-alpha;
    padding-left: calc(var(--grid-gutter) * 1.5);

    li {
      padding-left: var(--grid-gutter);

      &::marker {
        font-family: var(--ff-secondary);
        font-size: var(--fs-5);
      }
    }
  }

  ul.list {
    list-style-type: 'Â¬';

    li {
      &::marker {
        font-family: var(--ff-primary);
        font-size: var(--fs-base);
      }
    }
  }

  @media (min-width: 960px) {
    .title {
      translate: -100% 0;
    }

    .list {
      gap: to-rem(36);
      padding-left: 0;
      translate: calc(var(--grid-gutter) * -1) 0;
    }
  }
</style>
