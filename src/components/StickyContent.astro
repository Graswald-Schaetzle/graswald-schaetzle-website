---
import type { CollectionEntry } from 'astro:content';

type ModuleStickyContent =
  CollectionEntry<'pageHome'>['data']['moduleStickyContent'];

interface Props {
  fields: ModuleStickyContent;
}

import { marked } from 'marked';

import { navigation } from '@content/globals';

import LinkWithArrow from '@components/LinkWithArrow.astro';
import StickyColumnSections from '@components/StickyColumnSections.astro';

const { fields } = Astro.props;

const parsedIntro = await marked(fields.intro);
---

<script>
  const scrollDownButton = document.querySelector('[data-js="scroll-down"]');

  scrollDownButton?.addEventListener('click', () => {
    window.scrollTo({
      top: window.innerHeight,
      behavior: 'smooth',
    });
  });
</script>

<div id={fields.anchor} class="container">
  <div class="grid">
    <button class="scroll-down" data-js="scroll-down" aria-label="scroll down">
      <span class="icons">
        <svg
          class="icon icon-first"
          viewBox="0 0 10 12"
          fill="none"
          aria-hidden="true"
        >
          <path
            d="M9.82802 7.26223L5.14802 11.8342L0.468018 7.26223L1.18802 6.54223L4.68002 9.98023L4.68002 0.584229L5.61602 0.584229L5.61602 9.98023L9.10802 6.54223L9.82802 7.26223Z"
            fill="currentColor"></path>
        </svg>
        <svg
          class="icon icon-second"
          viewBox="0 0 10 12"
          fill="none"
          aria-hidden="true"
        >
          <path
            d="M9.82802 7.26223L5.14802 11.8342L0.468018 7.26223L1.18802 6.54223L4.68002 9.98023L4.68002 0.584229L5.61602 0.584229L5.61602 9.98023L9.10802 6.54223L9.82802 7.26223Z"
            fill="currentColor"></path>
        </svg>
      </span>
    </button>
    <nav class="navigation" data-js="nav" aria-label="primary navigation">
      <ol>
        {
          navigation.links.map((link, i) => (
            <li>
              <a
                href={`/#${link.anchor}`}
                class={`h3 ${i === 0 ? 'is-active' : ''}`}
              >
                {link.title}
              </a>
            </li>
          ))
        }
      </ol>
    </nav>
    <div class="sticky-columns">
      <div class="intro">
        <div class="richtext" set:html={parsedIntro} />
        <div class="intro-link">
          <LinkWithArrow fields={fields.introLink} />
        </div>
      </div>
      <div
        id={fields.stickyColumn1.anchor}
        class="sticky-column sticky-column-1"
      >
        <div class="title-wrap">
          <span class="index">1.</span>
          <h2 class="title h2">{fields.stickyColumn1.title}</h2>
        </div>
        {
          fields.stickyColumn1.sections.map(async (section) => (
            <div class="sticky-column-section">
              <StickyColumnSections fields={section} />
            </div>
          ))
        }
      </div>
      <div
        id={fields.stickyColumn2.anchor}
        class="sticky-column sticky-column-2"
      >
        <div class="title-wrap">
          <span class="index">2.</span>
          <h2 class="title h2">{fields.stickyColumn2.title}</h2>
        </div>
        {
          fields.stickyColumn2.sections.map((section) => (
            <div class="sticky-column-section">
              <StickyColumnSections fields={section} />
            </div>
          ))
        }
      </div>
    </div>
    <div id={fields.stickySection.column.anchor} class="sticky-section">
      <div class="sticky-section-title sticky-column">
        <div class="title-wrap">
          <span class="index">3.</span>
          <h2 class="title h2">{fields.stickySection.column.title}</h2>
        </div>
      </div>
      <div class="sticky-section-content">
        <h3 class="title h5">{fields.stickySection.content.title}</h3>
        <div
          class="content richtext h3"
          set:html={await marked(fields.stickySection.content.content)}
        />
      </div>
      <div class="sticky-section-sidebar">
        <div class="sticky-column">
          {
            fields.stickySection.column.sections.map(async (section) => (
              <div class="sticky-column-section">
                <StickyColumnSections fields={section} unorderedList={true} />
              </div>
            ))
          }
        </div>
      </div>
    </div>
    <div class="bg"></div>
  </div>
</div>

<style lang="scss">
  .container[id] {
    scroll-margin-top: var(--height-header);
  }

  .grid {
    position: relative;
    align-items: start;
  }

  .scroll-down {
    display: none;
    position: absolute;
    top: calc(100vh - var(--height-header));
    left: 0;
    translate: calc(-100% + to-rem(8)) calc(-100% - to-rem(36));
    padding: to-rem(12) to-rem(8);
    background-color: var(--c-primary);
    border-radius: to-rem(24);
    overflow: clip;

    &:hover {
      .icons {
        translate: 0 250%;
      }
    }

    .icons {
      display: grid;
      transition: translate 0.4s var(--ease-smooth);
    }

    .icon {
      grid-column: 1 / 1;
      grid-row: 1 / 1;
      width: to-rem(12);
      aspect-ratio: 12 / 10;
    }

    .icon-second {
      translate: 0 -250%;
    }
  }

  .navigation {
    display: none;
    grid-column: 9 / span 4;
    grid-row: 3;
    position: sticky;
    bottom: 0;
    z-index: 1;
    padding-bottom: to-rem(36);

    ol {
      display: flex;
      flex-direction: column;
      gap: to-rem(12);
      list-style-type: none;
      counter-reset: list -1;
    }

    li {
      display: flex;
      justify-content: space-between;
      align-items: baseline;
      opacity: 0.5;
      transition: opacity 0.4s var(--ease-smooth);
      counter-increment: list;

      &:has(a.is-active, a:hover) {
        opacity: 1;
      }

      &:has(a.is-active) {
        &::before {
          background-color: var(--c-primary);
        }
      }

      &::before {
        content: counter(list) '.';
        display: block;
        padding: to-rem(5) to-rem(10);
        font-family: var(--ff-secondary);
        font-size: to-rem(12);
        line-height: 1.5;
        letter-spacing: 0;
        border-radius: to-rem(24);
        translate: to-rem(-10) 0;
      }

      a {
        position: relative;
        display: flex;
        align-items: center;
        width: calc(50% - (var(--grid-gutter) / 2));

        &::before {
          flex-shrink: 0;
          content: '';
          width: 0.3em;
          margin-left: -0.3em;
          aspect-ratio: 11 / 32;
          background-image: inline-svg(
            "<svg viewBox='0 0 11 32' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M11.0001 0.52002L2.29006 31.48H0.810059L9.52006 0.52002H11.0001Z' fill='#171717'/></svg>"
          );
          background-repeat: no-repeat;
          background-size: contain;
        }
      }
    }
  }

  .sticky-column {
    --cols: 12;
    --col-width: calc(
      (100% - (var(--grid-gutter) * (var(--cols) - 1))) / var(--cols)
    );

    position: relative;
    scroll-margin-top: to-rem(208);

    > * {
      padding-left: calc(
        (var(--col-width) + var(--grid-gutter)) * var(--mult, 1)
      );
    }

    .title-wrap {
      --mult: 2;

      position: relative;

      .index {
        position: absolute;
        top: to-rem(6);
        left: 0;
        display: inline-block;
        padding: to-rem(5) to-rem(10);
        font-family: var(--ff-secondary);
        font-size: to-rem(12);
        line-height: 1.5;
        letter-spacing: 0;
        background-color: var(--c-primary);
        border-radius: to-rem(24);
      }

      .title {
        position: relative;
        display: flex;
        align-items: center;

        &::before {
          content: '';
          width: 0.25em;
          margin-left: -0.25em;
          aspect-ratio: 11 / 32;
          background-image: inline-svg(
            "<svg viewBox='0 0 11 32' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M11.0001 0.52002L2.29006 31.48H0.810059L9.52006 0.52002H11.0001Z' fill='#171717'/></svg>"
          );
          background-repeat: no-repeat;
          background-size: contain;
        }
      }
    }

    .sticky-column-section {
      position: relative;

      &:not(:first-child) {
        margin-top: to-rem(90);
      }
    }
  }

  .sticky-columns {
    grid-column: 1 / span 12;
    grid-row: 1;
    display: grid;
    grid-template-columns: subgrid;
    align-items: start;
    padding-bottom: calc(to-rem(120) + to-rem(40));

    .intro,
    .sticky-column-1,
    .sticky-column-2 {
      max-width: min(50ch, 100%);
    }

    .intro {
      grid-column: 1 / span 12;
      grid-row: 1;
      padding-top: to-rem(108);

      .intro-link {
        margin-top: to-rem(90);
      }
    }

    .sticky-column-1 {
      grid-column: 1 / span 12;
      grid-row: 2;
      margin-top: to-rem(180);
    }

    .sticky-column-2 {
      grid-column: 1 / span 12;
      grid-row: 3;
      margin-top: to-rem(180);
    }
  }

  .sticky-section {
    grid-column: 1 / span 12;
    grid-row: 2;
    display: grid;
    grid-template-columns: subgrid;
    align-items: start;
    padding-top: to-rem(156);

    .sticky-section-title {
      grid-column: 1 / span 12;
      padding-bottom: to-rem(90);
    }

    .sticky-section-content {
      --cols: 12;
      --col-width: calc(
        (100% - (var(--grid-gutter) * (var(--cols) - 1))) / var(--cols)
      );

      grid-column: 1 / span var(--cols);
      grid-row: 2;
      position: relative;
      padding-left: calc(var(--col-width) + var(--grid-gutter));
      padding-bottom: to-rem(90);

      .title {
        position: absolute;
        top: 0.5em;
        left: 0;
        writing-mode: sideways-lr;
      }
    }

    .sticky-section-sidebar {
      grid-column: 1 / span 12;
      grid-row: 3;
      padding-bottom: to-rem(156);
      max-width: min(50ch, 100%);
    }
  }

  .bg {
    grid-column: 1 / span 12;
    grid-row: 2 / 4;
    align-self: stretch;
    z-index: -1;
    background-color: var(--c-beige);
    box-shadow: 0 0 0 100vmax var(--c-beige);
    clip-path: inset(0 -100vmax);
  }

  @media (min-width: 960px) {
    .scroll-down {
      display: block;
    }

    .navigation {
      display: block;
    }

    .sticky-column {
      --cols: 7;

      .title-wrap {
        --mult: 1;

        .index {
          top: to-rem(10);
          translate: to-rem(-10) 0;
        }
      }

      .sticky-column-section {
        &:not(:first-child) {
          margin-top: to-rem(120);
        }
      }
    }

    .sticky-columns {
      grid-template-rows: calc(100vh - var(--height-header));
      grid-auto-rows: auto;

      .intro,
      .sticky-column-1,
      .sticky-column-2 {
        max-width: none;
      }

      .intro {
        grid-column: 9 / span 4;
        position: sticky;
        top: var(--height-header);
        padding-top: to-rem(48);

        .intro-link {
          position: absolute;
          top: 100%;
          left: 0;
          width: 100%;
          margin-top: to-rem(48);
        }
      }

      .sticky-column-1 {
        grid-column: 1 / span 7;
        margin-top: to-rem(208);
      }

      .sticky-column-2 {
        grid-column: 1 / span 7;
        margin-top: to-rem(144);
      }
    }

    .sticky-section {
      padding-top: to-rem(208);

      .sticky-section-title {
        grid-column: 9 / span 4;
        padding-bottom: to-rem(120);
      }

      .sticky-section-content {
        --cols: 8;

        position: sticky;
        top: calc(to-rem(120) + to-rem(60));
        padding-bottom: to-rem(36);

        .title {
          translate: -100% 0;
        }
      }

      .sticky-section-sidebar {
        grid-column: 9 / span 4;
        grid-row: 2;
        padding-bottom: to-rem(208);
        max-width: none;
      }
    }
  }

  @media (min-width: 1440px) {
    .sticky-column {
      --cols: 4;
    }

    .sticky-columns {
      .sticky-column-1 {
        grid-column: 1 / span 4;
      }

      .sticky-column-2 {
        grid-column: 5 / span 4;
        margin-top: 0;
      }
    }
  }

  @media (min-height: 900px) {
    .sticky-columns {
      .intro {
        padding-top: to-rem(144);

        .intro-link {
          margin-top: to-rem(120);
        }
      }
    }
  }
</style>
